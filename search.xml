<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>网站演变</title>
    <url>/2019/12/15/%E7%BD%91%E7%AB%99%E6%BC%94%E5%8F%98/</url>
    <content><![CDATA[<h2 id="大型网站的9大特点"><a href="#大型网站的9大特点" class="headerlink" title="大型网站的9大特点"></a>大型网站的9大特点</h2><p>​                说到大型网站，很多人可能都会有一个误区，他们会认为：<code>网站访问量大，那就是一个大型网站</code>，其实这只说对了一半。为什么呢？给大家举个例子就明白了。比如：<code>百度</code>旗下的上网导航网站：<code>hao123</code>。这个网站的用户访问量是非常巨大的，那么它是一个大型网站吗？其实不是。为什么呢？</p>
<p>​                类似<code>hao123</code>这样的网站，它们都是提供一个静态网页（可以通过模板技术生成静态页面），用户点击是跳转到其他的网站，它们是根据用户的访问需求提供了一种综合的网站分类推荐服务。这些网站本身是不具有庞大的数据量的。可以说他们和用户的交互都是单向的，网站通过自身编辑内容对用户提供访问内容，用户只需要点击浏览即可，相当于<code>Web1.0时代</code>的小型网站。</p>
<p>​                那么我们再来看一下<code>淘宝</code>和<code>京东</code>，这两个网站无疑都是大型网站，首先他们都具有庞大的访问量，不论是<code>淘宝双11</code>或是<code>京东618</code>，用户的请求量都是十分巨大的；再者，不仅仅访问量大，网站的数据体量也是非常庞大的，拥有海量数据，并且可以支持大数据分析。像每年年底都能通过大数据分析为你提供当年你花了多少钱，买了什么，预计明年会买什么等等，这些都是大型网站的基本特征。当然，大型互联网站的特点细分下来有很多，接下来我们一起来看一下：</p>
<p><strong>1. 高并发，流量大：</strong> 一个网站从小做到大，业务越来越大，积累的用户也越来越多，那么网站的请求量就势必越来越大。举个列子：</p>
<ul>
<li>百度日均访问达到50亿+（据说已经超过谷歌）</li>
<li>腾讯QQ早就突破1亿用户同时在线</li>
<li>淘宝双11交易金额达到2000多亿人民币<br>（在此背后，那些工程师付出了多少汗水！?）</li>
</ul>
<p><strong>2. 高可用：</strong> 大型网站有一个必须达到的标准，就是高可用。什么是高可用，就是假设服务器宕机了，这个时候用户就无法访问，我们必须保证网站稳定地向用户提供7x24小时不间断的服务，哪怕有服务器节点宕机了，这个时候备用机也会替换当前不可用的服务器节点，确保服务正常访问。</p>
<p><strong>3. 大数据：</strong> 通过大量服务器以及存储系统管理海量数据，比如阿里在全国各地有上千甚至上万台服务节点。数据多了，那么就可以做大数据分析了，比如为每个用户做用户画像，不论是用户购买习惯，还是用户未来预计会购买的商品，都能做到一步步的分析。当然图片数据也是数据，当你上传了图片，网站会通过人工智能来分析你的图片，不论是人物图，风景图还是宠物图，都会做到精确的分析。</p>
<p><strong>4. 敏捷开发，迭代快：</strong> 大型网站的用户量必然是会很多的，为了提高用户体验，优化用户各类操作，形形色色的需求都会被产品人员提出，通过头脑风暴、研讨会等方式角逐出一些非常好用的功能模块，与此同时，开发人员根据需求快速迭代，当然测试与运维也会跟进。一般来说1~2周会快速迭代一次。</p>
<p><strong>5. 用户体系庞大：</strong> 既然一个大型网站的用户量是非常大的，那么这些用户不可能都分布在同一个地区，他们都是分散的个体，分布在全国各地，甚至全球各地。比如通过淘宝和物流，你可以把商品卖到很偏远的农村或者山区，当然这些偏远地也能通过网站把自家的特产，卖向全国各地。</p>
<p><strong>6. 可持续升级：</strong> 任何大型网站都不是一蹴而就的，都是从最初最简单的版本一步一步迭代出来的，很多初创公司都会有这样的误区，一上来就搞一个高大上的架构，目标tps达到千万。淘宝初期，是从马云老师家里诞生的；苹果公司诞生于车库；谷歌诞生于斯坦福大学宿舍，随后搬入车库。他们刚推出的时候都是非常简单的网站。我们的课程也不会一上来就教大家直接搭建一个千万级架构的项目，而是会从单体电商项目起步，然后逐步演变，向集群，分布式，微服务发展，让大家真正感受一个大型项目到底是怎么一步步的从初创项目不断发展到今天的大型架构项目的。</p>
<p><strong>7. 安全防范：</strong> 正所谓树大招风，你越牛叉，就愈会有黑客或者同行来攻击你，所以这对运维来说也有相当大的挑战，我们之前的网站就被黑客攻击勒索比特币，出现这样的问题是因为服务器漏洞，比如上传图片，没有做到限制文件类型，只在前端判断，却没有在后端判断，导致黑客可以直接攻击Api接口，把PHP或者其他可植入脚本上传到服务器运行，这是非常危险的。</p>
<p><strong>8. 弹性扩展：</strong> 淘宝双11在并发量剧增的时候，可以通过增加服务器来扩容，从而引导剧增的流量；微博里若某明星结婚，流量也会剧增，这个时候服务器都是可以动态的增加，来实现动态扩容。不需要的时候适当减少服务器就行。</p>
<p><strong>9. 吞吐量高，响应速度快：</strong> 一个系统数据量一旦大了，那么它的响应速度会比较慢，这会影响用户体验。所以一个大型网站也必须保证用户每次的请求响应是很快的，虽然这个网站背后可能有上百上千台服务器，但是对于用户来说是透明的，他是不知道的。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>从上面可以看出，大型网站一般具备9个特点：</p>
<ul>
<li>高并发</li>
<li>高可用</li>
<li>大数据</li>
<li>迭代周期短</li>
<li>用户量庞大</li>
<li>可持续发展</li>
<li>安全级别高</li>
<li>可弹性、可伸缩</li>
<li>吞吐量高</li>
</ul>
<h3 id="大型网站的设计宗旨"><a href="#大型网站的设计宗旨" class="headerlink" title="大型网站的设计宗旨"></a>大型网站的设计宗旨</h3><p>平时开发过程中，对于项目架构的设计，需要注意：<br><strong>1. 合久必分：</strong> 最初MVC就是把系统拆为 <code>M(model)</code>、 <code>V(view)</code>、 <code>C(controller)</code>这三块，通过不同的包名来进行区分和分层，分层也是最常见的一种架构模式，不论用什么语言开发都会面临分层，这是无处不在的一种模式。而且分层也便于代码的解耦以及合理的工作分配。在我们的项目里，我们会通过Maven来对项目进行聚合分层。</p>
<p><strong>2. 集群：</strong> 集群是高可用和负载均衡的手段，多台服务器节点部署相同的应用构成一个集群，保证负载均衡的同时提升系统的可用性，互相灾备。</p>
<p><strong>3. CDN：</strong> 之前我们也说了，大型网站的用户群体是分散在全国各地的，所以，网站一旦发展到很庞大的时候，就会采用CDN。这样不论用户在哪里都能够访问到最近的服务节点，这样就不会因为距离而使得用户请求速度变慢。</p>
<p><strong>4. 分布式系统：</strong> 一个大型网站势必是由多系统、多模块、多中间件、多服务器等共同协同整合的一个整体。在分布式领域里，我们会接触到分布式架构、分布式文件系统、分布式锁、分布式事务、分布式配置、分布式限流、日志收集等等。</p>
<p><strong>5. 异步：</strong> 异步是最常见的优化用户体验的一种方式。前端可以采用Ajax异步调用，减少页面刷新；后端采用<code>生产者</code>和<code>消费者</code>模式，对代码进行解耦，如此就会使用到消息队列，常见的消息队列为：<code>RabbitMQ</code>、<code>RocketMQ</code>、<code>ActiveMQ</code>、<code>Kafka</code>等，合理地使用消息队列，可以在高并发时进行流量消峰，以而达到保护自己的作用。</p>
<p><strong>6. 业务分离：</strong> 一个大型网站的业务会有很多，用户、订单、商品、支付等等，那么这些模块都可以合理的进行分离，独立出一个子系统或子服务让某个专门的团队来负责,我们会在微服务阶段进行讲解。</p>
<p><strong>7. 数据备份：</strong> 在大型网站多服务器运维的情况下，节点宕机是非常常见的，一旦宕机，我们所要做的就是数据的备份，不能因为宕机了而导致数据丢失。所以，定期为数据库做好冷热备份，做好主从，以此达到系统的高可用性（一般这块都又运维工程师帮我们搞定）。</p>
]]></content>
      <categories>
        <category>架构师</category>
      </categories>
      <tags>
        <tag>架构演变</tag>
      </tags>
  </entry>
</search>
